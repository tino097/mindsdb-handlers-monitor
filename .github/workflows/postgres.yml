name: MindsDB PostgreSQL Monitor CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  infra:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Start Oracle XE (use the tag you prefer)
      - name: Run Oracle XE container
        run: |
          docker run -d --name oracle-xe \
            -p 1521:1521 -p 5500:5500 \
            -e ORACLE_PASSWORD=OraclePassword123 \
            -e ORACLE_CHARACTERSET=AL32UTF8 \
            gvenzl/oracle-xe:21-slim

      # Wait for readiness via logs (message is emitted when DB is usable)
      - name: Wait for Oracle via logs
        run: |
          set -euo pipefail
          for i in $(seq 1 180); do
            echo "[$i] waiting for 'DATABASE IS READY TO USE!'..."
            if docker logs oracle-xe 2>&1 | grep -q "DATABASE IS READY TO USE"; then
              echo "✅ Oracle is ready (log signal)"
              break
            fi
            sleep 5
          done
          if ! docker logs oracle-xe 2>&1 | grep -q "DATABASE IS READY TO USE"; then
            echo "❌ Oracle did not become ready in time"
            docker logs oracle-xe | tail -n 400 || true
            exit 1
          fi

      # Install Python & oracledb for an actual connection probe
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install oracledb
        run: |
          python -m pip install --upgrade pip
          pip install oracledb

      # Verify we can connect; try both XEPDB1 and XE (XEPDB1 is the default service)
      - name: Probe Oracle connection (thin)
        id: probe_oracle
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          python -u - <<'PY'
          import os, sys, time
          import oracledb
          USER = 'system'
          PASSWORD = 'OraclePassword123'
          DSNS = ['localhost:1521/XEPDB1', 'localhost:1521/XE']
          # XEPDB1 is the default PDB service in XE; try it first. :contentReference[oaicite:1]{index=1}
          for attempt in range(1, 121):
              for dsn in DSNS:
                  print(f"[{attempt}] Trying DSN={dsn}...", flush=True)
                  try:
                      with oracledb.connect(user=USER, password=PASSWORD, dsn=dsn, timeout=5) as conn:
                          with conn.cursor() as cur:
                              cur.execute("SELECT 1 FROM dual")
                              print(f"✅ Connected to {dsn}", flush=True)
                              # Expose DSN for later steps
                              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                                  fh.write(f"dsn={dsn}\n")
                              sys.exit(0)
                  except Exception as e:
                      print(f"[{attempt}] Failed {dsn}: {e!r}", flush=True)
              time.sleep(5)
          print("❌ Could not connect within timeout", file=sys.stderr)
          sys.exit(1)
          PY

      # MindsDB
      - name: Install MindsDB
        run: |
          python -m pip install --upgrade pip
          pip install "mindsdb[all]"

      - name: Start MindsDB HTTP API
        run: |
          set -euo pipefail
          python -m mindsdb --api http --verbose &
          echo "MINDSDB_PID=$!" >> $GITHUB_ENV
          echo "Waiting for MindsDB to start..."
          for i in $(seq 1 180); do
            echo "[$i] Checking MindsDB..."
            if curl -sf http://localhost:47334/api/status >/dev/null; then
              echo "✅ MindsDB is ready!"
              exit 0
            fi
            sleep 1
          done
          echo "❌ MindsDB failed to start within 180 seconds" >&2
          exit 1

      # Sanity prints (infra-only)
      - name: Verify services
        run: |
          echo "== docker ps ==" && docker ps
          echo "== Oracle logs (tail) ==" && docker logs oracle-xe | tail -n 80 || true
          echo "== MindsDB status ==" && curl -sf http://localhost:47334/api/status | tee mindsdb_status.json || true

      - name: Cleanup
        if: always()
        run: |
          if [ -n "${MINDSDB_PID:-}" ]; then kill ${MINDSDB_PID} || true; fi
          docker rm -f oracle-xe || true
