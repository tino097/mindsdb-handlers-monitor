name: MindsDB PostgreSQL Monitor CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install test reporting plugins
          pip install pytest-html pytest-json-report

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do 
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          echo "PostgreSQL is ready!"

      - name: Install & start MindsDB
        run: |
          python -m pip install --upgrade pip

          # Install MindsDB from your fork or main repo
          git clone https://github.com/mindsdb/mindsdb.git
          cd mindsdb
          pip install -e .[postgres]

          echo "üöÄ Starting MindsDB..."
          MINDSDB_NO_STUDIO=1 python -m mindsdb --api http --verbose > /tmp/mindsdb.log 2>&1 &
          echo "MINDSDB_PID=$!" >> $GITHUB_ENV

          echo "‚è≥ Waiting for MindsDB to be ready..."
          for i in $(seq 1 180); do
            echo "[$i] Checking MindsDB..."
            if curl -sf http://127.0.0.1:47334/api/status >/dev/null; then
              echo "‚úÖ MindsDB is ready!"
              exit 0
            fi
            sleep 1
          done

          echo "‚ùå MindsDB failed to start"
          echo "=== MindsDB logs ==="
          cat /tmp/mindsdb.log
          exit 1

      - name: Verify services
        run: |
          echo "üîç Verifying all services are running..."

          # Check PostgreSQL
          pg_isready -h localhost -p 5432 -U postgres && echo "‚úÖ PostgreSQL: Running" || echo "‚ùå PostgreSQL: Not Running"

          # Check MindsDB
          curl -sf http://127.0.0.1:47334/api/status | tee /tmp/mindsdb_status.json || echo "‚ùå MindsDB: Not responding"

          echo ""
          echo "üìã MindsDB Status:"
          cat /tmp/mindsdb_status.json | python3 -m json.tool || true

      - name: Run tests with result tracking
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          MINDSDB_API_URL: http://localhost:47334
        run: |
          echo "üß™ Running PostgreSQL handler tests..."

          # Create results directory
          mkdir -p /tmp/test_results

          # Run tests with detailed output and reporting
          cd postgres/tests
          pytest -v --tb=short \
            --junit-xml=/tmp/test_results/junit.xml \
            --html=/tmp/test_results/report.html \
            --self-contained-html \
            || TEST_EXIT_CODE=$?

          # Exit with the test result code (allows summary generation even on failure)
          exit ${TEST_EXIT_CODE:-0}

      - name: Generate test summary
        if: always()
        run: |
          set -eu
          echo "=== Generating Test Summary ==="

          # Initialize counters
          total_tests=0
          passed=0
          failed=0
          errors=0
          skipped=0

          # Check if JUnit XML exists
          if [ -f /tmp/test_results/junit.xml ]; then
            # Parse JUnit XML for test counts
            if command -v python3 &> /dev/null; then
              python3 <<'PYEOF' > /tmp/test_summary.txt
          import xml.etree.ElementTree as ET
          import sys

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              # Get test suite stats
              testsuite = root.find('.//testsuite')
              if testsuite is not None:
                  tests = int(testsuite.get('tests', 0))
                  failures = int(testsuite.get('failures', 0))
                  errors = int(testsuite.get('errors', 0))
                  skipped = int(testsuite.get('skipped', 0))
                  passed = tests - failures - errors - skipped
                  
                  print(f"{tests},{passed},{failures},{errors},{skipped}")
              else:
                  print("0,0,0,0,0")
          except Exception as e:
              print(f"0,0,0,0,0", file=sys.stderr)
              print(f"Error: {e}", file=sys.stderr)
          PYEOF
              
              if [ -f /tmp/test_summary.txt ]; then
                IFS=',' read -r total_tests passed failed errors skipped < /tmp/test_summary.txt
              fi
            fi
          fi

          # Calculate success rate
          success_rate=0
          if [ $total_tests -gt 0 ]; then
            success_rate=$(( passed * 100 / total_tests ))
          fi

          # Generate markdown summary
          {
            echo "# MindsDB PostgreSQL Handler Test Results"
            echo ""
            echo "## Summary"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| Total Tests | $total_tests |"
            echo "| ‚úÖ Passed | $passed |"
            echo "| ‚ùå Failed | $failed |"
            echo "| ‚ö†Ô∏è Errors | $errors |"
            echo "| ‚è≠Ô∏è Skipped | $skipped |"
            echo "| Success Rate | ${success_rate}% |"
            echo ""
            
            # Overall status
            if [ $total_tests -eq 0 ]; then
              echo "## ‚ö†Ô∏è No Tests Found"
              echo ""
              echo "No test results were generated. Please check your test configuration."
              
            elif [ $passed -eq $total_tests ]; then
              echo "## üéâ All Tests Passed!"
              echo ""
              echo "The MindsDB PostgreSQL handler is working correctly with all tests."
              
            elif [ $passed -gt 0 ]; then
              echo "## ‚ö†Ô∏è Partial Success"
              echo ""
              echo "Some tests passed but issues were detected. Please review failed tests."
              
            else
              echo "## ‚ùå All Tests Failed"
              echo ""
              echo "The PostgreSQL handler has critical issues. Please review the test logs."
            fi
            
            echo ""
            echo "## Database Configuration"
            echo ""
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| Host | localhost |"
            echo "| Port | 5432 |"
            echo "| Database | test_db |"
            echo "| Schema | test_schema |"
            echo "| PostgreSQL Version | 15 |"
            echo ""
            
            echo "## Test Data"
            echo ""
            echo "| Table | Rows |"
            echo "|-------|------|"
            echo "| customers | 5 |"
            echo "| products | 5 |"
            echo "| orders | 5 |"
            echo "| order_items | 7 |"
            echo ""
            
            # Add test execution details if available
            if [ -f /tmp/test_results/junit.xml ]; then
              echo "## Test Details"
              echo ""
              python3 <<'PYEOF'
          import xml.etree.ElementTree as ET

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              print("| Test Name | Status | Duration |")
              print("|-----------|--------|----------|")
              
              for testcase in root.findall('.//testcase'):
                  name = testcase.get('name', 'Unknown')
                  time = float(testcase.get('time', 0))
                  
                  # Check status
                  if testcase.find('failure') is not None:
                      status = "‚ùå Failed"
                  elif testcase.find('error') is not None:
                      status = "‚ö†Ô∏è Error"
                  elif testcase.find('skipped') is not None:
                      status = "‚è≠Ô∏è Skipped"
                  else:
                      status = "‚úÖ Passed"
                  
                  print(f"| {name} | {status} | {time:.3f}s |")
          except Exception as e:
              print(f"Could not parse test details: {e}")
          PYEOF
              echo ""
            fi
            
            echo "---"
            echo ""
            echo "**Analysis completed:** $(date '+%A, %B %d, %Y at %I:%M %p %Z')"
            
          } > /tmp/combined_summary.md

          # Output to GitHub Actions summary
          cat /tmp/combined_summary.md >> $GITHUB_STEP_SUMMARY

          echo "‚úÖ Test summary generated"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mindsdb-postgres-test-results
          path: |
            /tmp/test_results/
            /tmp/mindsdb.log
            /tmp/combined_summary.md
          retention-days: 7

      - name: Update postgres README with test results
        if: always() && github.event_name != 'pull_request'
        run: |
          echo "üìù Updating postgres/README.md with latest test results..."
          python3 .github/scripts/update_readme.py \
            /tmp/test_results/junit.xml \
            postgres/README.md \
            "PostgreSQL" \
            postgres.yml

      - name: Commit README changes
        if: always() && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add postgres/README.md || true
          git diff --quiet && git diff --staged --quiet || \
            (git commit -m "docs(postgres): Update test results in README [skip ci]" && git push) || \
            echo "No changes to commit"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          if [ -n "${MINDSDB_PID:-}" ]; then
            kill ${MINDSDB_PID} || true
            echo "‚úÖ MindsDB stopped"
          fi
