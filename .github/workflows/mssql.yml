name: MindsDB MS SQL Server Monitor CI
on:
  push:
    branches: [main, develop]
    paths:
      - "mssql/**"
      - ".github/workflows/mssql-tests.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "mssql/**"
      - ".github/workflows/mssql-tests.yml"
  workflow_dispatch:

env:
  MSSQL_SA_PASSWORD: "YourStrong@Passw0rd"
  MSSQL_DB: "TestDB"
  MSSQL_USER: "testuser"
  MSSQL_USER_PASSWORD: "TestUser@123"
  MINDSDB_API_URL: "http://localhost:47334"

jobs:
  test-mssql-handler:
    runs-on: ubuntu-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          MSSQL_SA_PASSWORD: "YourStrong@Passw0rd"
          MSSQL_PID: "Developer"
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -C -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov requests

      - name: ⏳ Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to be fully ready..."
          for i in {1..30}; do
            if docker exec $(docker ps -q -f ancestor=mcr.microsoft.com/mssql/server:2022-latest) /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -C -Q "SELECT 1" > /dev/null 2>&1; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Attempt $i: SQL Server not ready yet, waiting..."
            sleep 2
          done

      - name: 🗄️ Initialize database and create test user
        run: |
          CONTAINER_ID=$(docker ps -q -f ancestor=mcr.microsoft.com/mssql/server:2022-latest)

          echo "Creating database TestDB..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U sa -P "YourStrong@Passw0rd" -C \
            -Q "CREATE DATABASE TestDB;"

          echo "Creating login and user..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U sa -P "YourStrong@Passw0rd" -C \
            -Q "CREATE LOGIN testuser WITH PASSWORD = 'TestUser@123', CHECK_POLICY = OFF;"

          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U sa -P "YourStrong@Passw0rd" -C -d TestDB \
            -Q "CREATE USER testuser FOR LOGIN testuser; ALTER ROLE db_owner ADD MEMBER testuser;"

          echo "Verifying user creation..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U sa -P "YourStrong@Passw0rd" -C \
            -Q "SELECT name FROM sys.server_principals WHERE name = 'testuser';"

          echo "Testing testuser connection..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U testuser -P "TestUser@123" -C -d TestDB \
            -Q "SELECT DB_NAME() as current_database;"

      - name: 📊 Load test data into SQL Server
        run: |
          # Copy SQL files into the container
          CONTAINER_ID=$(docker ps -q -f ancestor=mcr.microsoft.com/mssql/server:2022-latest)
          docker cp mssql/sql/init_schema.sql $CONTAINER_ID:/tmp/init_schema.sql
          docker cp mssql/sql/load_data.sql $CONTAINER_ID:/tmp/load_data.sql

          echo "Loading schema..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -C -d TestDB -i /tmp/init_schema.sql

          echo "Loading data..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -C -d TestDB -i /tmp/load_data.sql

          echo "Verifying tables..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U testuser -P "TestUser@123" -C -d TestDB \
            -Q "SELECT name FROM sys.tables ORDER BY name;"

          echo "Verifying data..."
          docker exec $CONTAINER_ID /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U testuser -P "TestUser@123" -C -d TestDB \
            -Q "SELECT COUNT(*) as customer_count FROM customer;"

      - name: Install & start MindsDB
        run: |
          python -m pip install --upgrade pip
          git clone https://github.com/tino097/mindsdb.git
          cd mindsdb
          git checkout develop
          pip install -e .[mssql]
          echo "🚀 Starting MindsDB..."
          MINDSDB_NO_STUDIO=1 python -m mindsdb --api http --verbose &
          echo "MINDSDB_PID=$!" >> $GITHUB_ENV
          for i in $(seq 1 180); do
            echo "[$i] Checking MindsDB..."
            if curl -sf http://127.0.0.1:47334/api/status >/dev/null; then
              echo "✅ MindsDB is ready!"
              exit 0
            fi
            sleep 1
          done
          echo "❌ MindsDB failed to start"; exit 1

      - name: 🧪 Run tests with result tracking
        env:
          MSSQL_HOST: localhost
          MSSQL_PORT: 1433
          MSSQL_USER: testuser
          MSSQL_PASSWORD: "TestUser@123"
          MSSQL_DATABASE: TestDB
          MINDSDB_API_URL: "http://localhost:47334"
          LOG_LEVEL: INFO
        run: |
          echo "🧪 Running MS SQL Server handler tests..."

          # Create results directory
          mkdir -p /tmp/test_results

          # Run tests with detailed output and reporting
          cd mssql
          pytest tests/ -v --tb=short \
            --cov=. --cov-report=term-missing --cov-report=xml \
            --junit-xml=/tmp/test_results/junit.xml \
            || true

          echo "✅ Tests completed"

      - name: 📊 Generate test summary
        if: always()
        run: |
          set -eu
          echo "=== Generating Test Summary ==="

          # Initialize counters
          total_tests=0
          passed=0
          failed=0
          errors=0
          skipped=0

          # Check if JUnit XML exists
          if [ -f /tmp/test_results/junit.xml ]; then
            # Parse JUnit XML for test counts
            if command -v python3 &> /dev/null; then
              python3 <<'PYEOF' > /tmp/test_summary.txt
          import xml.etree.ElementTree as ET
          import sys

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              # Get test suite stats
              testsuite = root.find('.//testsuite')
              if testsuite is not None:
                  tests = int(testsuite.get('tests', 0))
                  failures = int(testsuite.get('failures', 0))
                  errors = int(testsuite.get('errors', 0))
                  skipped = int(testsuite.get('skipped', 0))
                  passed = tests - failures - errors - skipped
                  
                  print(f"{tests},{passed},{failures},{errors},{skipped}")
              else:
                  print("0,0,0,0,0")
          except Exception as e:
              print(f"0,0,0,0,0", file=sys.stderr)
              print(f"Error: {e}", file=sys.stderr)
          PYEOF
              
              if [ -f /tmp/test_summary.txt ]; then
                IFS=',' read -r total_tests passed failed errors skipped < /tmp/test_summary.txt
              fi
            fi
          fi

          # Calculate success rate
          success_rate=0
          if [ $total_tests -gt 0 ]; then
            success_rate=$(( passed * 100 / total_tests ))
          fi

          # Generate markdown summary
          {
            echo "# MindsDB MS SQL Server Handler Test Results"
            echo ""
            echo "## Summary"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| Total Tests | $total_tests |"
            echo "| ✅ Passed | $passed |"
            echo "| ❌ Failed | $failed |"
            echo "| ⚠️ Errors | $errors |"
            echo "| ⏭️ Skipped | $skipped |"
            echo "| Success Rate | ${success_rate}% |"
            echo ""
            
            # Overall status
            if [ $total_tests -eq 0 ]; then
              echo "## ⚠️ No Tests Found"
              echo ""
              echo "No test results were generated. Please check your test configuration."
              
            elif [ $passed -eq $total_tests ]; then
              echo "## 🎉 All Tests Passed!"
              echo ""
              echo "The MindsDB MS SQL Server handler is working correctly with all tests."
              
            elif [ $passed -gt 0 ]; then
              echo "## ⚠️ Partial Success"
              echo ""
              echo "Some tests passed but issues were detected. Please review failed tests."
              
            else
              echo "## ❌ All Tests Failed"
              echo ""
              echo "The MS SQL Server handler has critical issues. Please review the test logs."
            fi
            
            echo ""
            echo "## Database Configuration"
            echo ""
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| Host | localhost |"
            echo "| Port | 1433 |"
            echo "| Database | TestDB |"
            echo "| User | testuser |"
            echo "| SQL Server Version | 2022 (Developer Edition) |"
            echo ""
            
            # Add test execution details if available
            if [ -f /tmp/test_results/junit.xml ]; then
              echo "## Test Details"
              echo ""
              python3 <<'PYEOF'
          import xml.etree.ElementTree as ET

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              print("| Test Name | Status | Duration |")
              print("|-----------|--------|----------|")
              
              for testcase in root.findall('.//testcase'):
                  name = testcase.get('name', 'Unknown')
                  classname = testcase.get('classname', '')
                  time = float(testcase.get('time', 0))
                  
                  # Get short name without full path
                  if '::' in name:
                      short_name = name.split('::')[-1]
                  else:
                      short_name = name
                  
                  # Check status
                  if testcase.find('failure') is not None:
                      status = "❌ Failed"
                  elif testcase.find('error') is not None:
                      status = "⚠️ Error"
                  elif testcase.find('skipped') is not None:
                      status = "⏭️ Skipped"
                  else:
                      status = "✅ Passed"
                  
                  print(f"| {short_name} | {status} | {time:.3f}s |")
          except Exception as e:
              print(f"Could not parse test details: {e}")
          PYEOF
              echo ""
              
              # Show failed test details
              echo "## Failed Test Details"
              echo ""
              python3 <<'PYEOF'
          import xml.etree.ElementTree as ET

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              has_failures = False
              for testcase in root.findall('.//testcase'):
                  failure = testcase.find('failure')
                  error = testcase.find('error')
                  
                  if failure is not None or error is not None:
                      if not has_failures:
                          print("| Test Name | Error Type | Message |")
                          print("|-----------|------------|---------|")
                          has_failures = True
                      
                      name = testcase.get('name', 'Unknown')
                      if '::' in name:
                          short_name = name.split('::')[-1]
                      else:
                          short_name = name
                      
                      if failure is not None:
                          error_type = failure.get('type', 'Failure')
                          message = failure.get('message', 'No message')[:100]
                      else:
                          error_type = error.get('type', 'Error')
                          message = error.get('message', 'No message')[:100]
                      
                      print(f"| {short_name} | {error_type} | {message} |")
              
              if not has_failures:
                  print("✅ **No test failures** - All tests passed successfully!")
          except Exception as e:
              print(f"Could not parse failure details: {e}")
          PYEOF
              echo ""
            fi
            
            # Add coverage information if available
            if [ -f mssql/coverage.xml ]; then
              echo "## Code Coverage"
              echo ""
              echo "Coverage report generated. See artifacts for detailed coverage.xml file."
              echo ""
            fi
            
            echo "---"
            echo ""
            echo "**Analysis completed:** $(date '+%A, %B %d, %Y at %I:%M %p %Z')"
            
          } > /tmp/combined_summary.md

          # Output to GitHub Actions summary
          cat /tmp/combined_summary.md >> $GITHUB_STEP_SUMMARY

          echo "✅ Test summary generated"

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mindsdb-mssql-test-results
          path: |
            /tmp/test_results/
            /tmp/mindsdb.log
            /tmp/combined_summary.md
            mssql/coverage.xml
          retention-days: 7

      - name: 📝 Update mssql README with test results
        if: always() && github.event_name != 'pull_request'
        run: |
          echo "📝 Updating mssql/README.md with latest test results..."
          python3 .github/scripts/update_readme.py \
            /tmp/test_results/junit.xml \
            mssql/README.md \
            "MS SQL Server" \
            mssql.yml

      - name: 📝 Commit README changes
        if: always() && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add mssql/README.md || true
          git diff --quiet && git diff --staged --quiet || \
            (git commit -m "docs(mssql): Update test results in README [skip ci]" && git push) || \
            echo "No changes to commit"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          if [ -n "${MINDSDB_PID:-}" ]; then
            kill ${MINDSDB_PID} || true
            echo "✅ MindsDB stopped"
          fi
