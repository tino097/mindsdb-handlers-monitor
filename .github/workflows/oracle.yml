name: MindsDB with Oracle XE Monitor CI

on:
  push:
    branches: ["main"]
    paths:
      - "oracle/**"
      - ".github/workflows/oracle-ci.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "oracle/**"
      - ".github/workflows/oracle-ci.yml"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  infra:
    runs-on: ubuntu-latest
    services:
      oracle:
        image: gvenzl/oracle-xe:21
        env:
          ORACLE_PASSWORD: OraclePassword123
          ORACLE_CHARACTERSET: AL32UTF8
        ports:
          - 1521:1521
          - 5500:5500
        options: >-
          --health-cmd "bash -lc 'echo > /dev/tcp/127.0.0.1/1521'"
          --health-interval 10s --health-timeout 3s --health-retries 120

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true # ‚Üê This downloads actual LFS files instead of pointers

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for oracle health
        run: |
          set -euo pipefail
          ID="${{ job.services.oracle.id }}"
          for i in $(seq 1 180); do
            status=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$ID" || echo "none")
            echo "[$i] oracle health: $status"
            if [ "$status" = "healthy" ]; then
              echo "‚úÖ Oracle healthy"
              break
            fi
            sleep 5
          done
          test "$(docker inspect -f '{{.State.Health.Status}}' "$ID")" = "healthy" || (docker logs "$ID" | tail -n 200; exit 1)

      - name: Install & start MindsDB
        run: |
          python -m pip install --upgrade pip
          git clone https://github.com/tino097/mindsdb.git
          cd mindsdb
          git checkout develop
          pip install -e .[all,oracle]
          echo "üöÄ Starting MindsDB..."
          MINDSDB_NO_STUDIO=1 python -m mindsdb --api http --verbose &
          echo "MINDSDB_PID=$!" >> $GITHUB_ENV
          for i in $(seq 1 180); do
            echo "[$i] Checking MindsDB..."
            if curl -sf http://127.0.0.1:47334/api/status >/dev/null; then
              echo "‚úÖ MindsDB is ready!"
              exit 0
            fi
            sleep 1
          done
          echo "‚ùå MindsDB failed to start"; exit 1

      - name: Setup Oracle user and schema
        run: |
          docker ps
          echo "üîß Creating sampleuser and setting up schema..."

          # Create user
          docker exec -i ${{ job.services.oracle.id }} sqlplus -S system/OraclePassword123@//localhost:1521/XEPDB1 < oracle/data/01-setup-user.sql

          echo "‚úÖ User created successfully"

      - name: Create TPC-H tables
        run: |
          echo "üìä Creating TPC-H tables..."
          docker exec -i ${{ job.services.oracle.id }} sqlplus -S sampleuser/SamplePass123@//localhost:1521/XEPDB1 <<'EOF'
          -- REGION table
          CREATE TABLE REGION (
            R_REGIONKEY NUMBER NOT NULL,
            R_NAME VARCHAR2(25) NOT NULL,
            R_COMMENT VARCHAR2(152),
            PRIMARY KEY (R_REGIONKEY)
          );

          -- NATION table
          CREATE TABLE NATION (
            N_NATIONKEY NUMBER NOT NULL,
            N_NAME VARCHAR2(25) NOT NULL,
            N_REGIONKEY NUMBER NOT NULL,
            N_COMMENT VARCHAR2(152),
            PRIMARY KEY (N_NATIONKEY)
          );

          -- SUPPLIER table
          CREATE TABLE SUPPLIER (
            S_SUPPKEY NUMBER NOT NULL,
            S_NAME VARCHAR2(25) NOT NULL,
            S_ADDRESS VARCHAR2(40) NOT NULL,
            S_NATIONKEY NUMBER NOT NULL,
            S_PHONE VARCHAR2(15) NOT NULL,
            S_ACCTBAL NUMBER(15,2) NOT NULL,
            S_COMMENT VARCHAR2(101),
            PRIMARY KEY (S_SUPPKEY)
          );

          -- PART table
          CREATE TABLE PART (
            P_PARTKEY NUMBER NOT NULL,
            P_NAME VARCHAR2(55) NOT NULL,
            P_MFGR VARCHAR2(25) NOT NULL,
            P_BRAND VARCHAR2(10) NOT NULL,
            P_TYPE VARCHAR2(25) NOT NULL,
            P_SIZE NUMBER NOT NULL,
            P_CONTAINER VARCHAR2(10) NOT NULL,
            P_RETAILPRICE NUMBER(15,2) NOT NULL,
            P_COMMENT VARCHAR2(23),
            PRIMARY KEY (P_PARTKEY)
          );

          -- PARTSUPP table
          CREATE TABLE PARTSUPP (
            PS_PARTKEY NUMBER NOT NULL,
            PS_SUPPKEY NUMBER NOT NULL,
            PS_AVAILQTY NUMBER NOT NULL,
            PS_SUPPLYCOST NUMBER(15,2) NOT NULL,
            PS_COMMENT VARCHAR2(199),
            PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY)
          );

          -- CUSTOMER table
          CREATE TABLE CUSTOMER (
            C_CUSTKEY NUMBER NOT NULL,
            C_NAME VARCHAR2(25) NOT NULL,
            C_ADDRESS VARCHAR2(40) NOT NULL,
            C_NATIONKEY NUMBER NOT NULL,
            C_PHONE VARCHAR2(15) NOT NULL,
            C_ACCTBAL NUMBER(15,2) NOT NULL,
            C_MKTSEGMENT VARCHAR2(10) NOT NULL,
            C_COMMENT VARCHAR2(117),
            PRIMARY KEY (C_CUSTKEY)
          );

          -- ORDERS table
          CREATE TABLE ORDERS (
            O_ORDERKEY NUMBER NOT NULL,
            O_CUSTKEY NUMBER NOT NULL,
            O_ORDERSTATUS VARCHAR2(1) NOT NULL,
            O_TOTALPRICE NUMBER(15,2) NOT NULL,
            O_ORDERDATE DATE NOT NULL,
            O_ORDERPRIORITY VARCHAR2(15) NOT NULL,
            O_CLERK VARCHAR2(15) NOT NULL,
            O_SHIPPRIORITY NUMBER NOT NULL,
            O_COMMENT VARCHAR2(79),
            PRIMARY KEY (O_ORDERKEY)
          );

          -- LINEITEM table
          CREATE TABLE LINEITEM (
            L_ORDERKEY NUMBER NOT NULL,
            L_PARTKEY NUMBER NOT NULL,
            L_SUPPKEY NUMBER NOT NULL,
            L_LINENUMBER NUMBER NOT NULL,
            L_QUANTITY NUMBER(15,2) NOT NULL,
            L_EXTENDEDPRICE NUMBER(15,2) NOT NULL,
            L_DISCOUNT NUMBER(15,2) NOT NULL,
            L_TAX NUMBER(15,2) NOT NULL,
            L_RETURNFLAG VARCHAR2(1) NOT NULL,
            L_LINESTATUS VARCHAR2(1) NOT NULL,
            L_SHIPDATE DATE NOT NULL,
            L_COMMITDATE DATE NOT NULL,
            L_RECEIPTDATE DATE NOT NULL,
            L_SHIPINSTRUCT VARCHAR2(25) NOT NULL,
            L_SHIPMODE VARCHAR2(10) NOT NULL,
            L_COMMENT VARCHAR2(44),
            PRIMARY KEY (L_ORDERKEY, L_LINENUMBER)
          );

          EXIT;
          EOF

          echo "‚úÖ Tables created successfully"

      - name: Copy TPC-H data files to container
        run: |
          echo "üì¶ Copying .tbl files to Oracle container..."

          # Create directory in container first
          docker exec ${{ job.services.oracle.id }} mkdir -p /tmp/tpch

          # Copy files
          docker cp oracle/data/tables/. ${{ job.services.oracle.id }}:/tmp/tpch/

          # Verify files were copied with actual content
          echo "üìã Verifying files..."
          docker exec ${{ job.services.oracle.id }} ls -lh /tmp/tpch/

          echo "‚úÖ Files copied"

      - name: Load TPC-H data using SQL*Loader
        run: |
          echo "üì• Loading TPC-H data..."

          # Copy control files to container
          docker cp oracle/data/ctl/. ${{ job.services.oracle.id }}:/tmp/tpch/

          echo "üîÑ Loading REGION..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/region.ctl log=/tmp/tpch/region.log bad=/tmp/tpch/region.bad silent=feedback

          echo "üîÑ Loading NATION..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/nation.ctl log=/tmp/tpch/nation.log bad=/tmp/tpch/nation.bad silent=feedback

          echo "üîÑ Loading SUPPLIER..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/supplier.ctl log=/tmp/tpch/supplier.log bad=/tmp/tpch/supplier.bad silent=feedback

          echo "üîÑ Loading PART..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/part.ctl log=/tmp/tpch/part.log bad=/tmp/tpch/part.bad silent=feedback

          echo "üîÑ Loading PARTSUPP..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/partsupp.ctl log=/tmp/tpch/partsupp.log bad=/tmp/tpch/partsupp.bad silent=feedback

          echo "üîÑ Loading CUSTOMER..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/customer.ctl log=/tmp/tpch/customer.log bad=/tmp/tpch/customer.bad silent=feedback

          echo "üîÑ Loading ORDERS..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/orders.ctl log=/tmp/tpch/orders.log bad=/tmp/tpch/orders.bad silent=feedback

          echo "üîÑ Loading LINEITEM (this may take a while)..."
          docker exec ${{ job.services.oracle.id }} sqlldr sampleuser/SamplePass123@XEPDB1 control=/tmp/tpch/lineitem.ctl log=/tmp/tpch/lineitem.log bad=/tmp/tpch/lineitem.bad silent=feedback

          echo "‚úÖ Data loading complete!"

      - name: Add foreign key constraints
        run: |
          echo "üîó Adding foreign key constraints..."
          docker exec -i ${{ job.services.oracle.id }} sqlplus -S sampleuser/SamplePass123@//localhost:1521/XEPDB1 <<'EOF'
          ALTER TABLE NATION ADD CONSTRAINT FK_NATION_REGION 
            FOREIGN KEY (N_REGIONKEY) REFERENCES REGION(R_REGIONKEY);

          ALTER TABLE SUPPLIER ADD CONSTRAINT FK_SUPPLIER_NATION 
            FOREIGN KEY (S_NATIONKEY) REFERENCES NATION(N_NATIONKEY);

          ALTER TABLE PARTSUPP ADD CONSTRAINT FK_PARTSUPP_PART 
            FOREIGN KEY (PS_PARTKEY) REFERENCES PART(P_PARTKEY);

          ALTER TABLE PARTSUPP ADD CONSTRAINT FK_PARTSUPP_SUPPLIER 
            FOREIGN KEY (PS_SUPPKEY) REFERENCES SUPPLIER(S_SUPPKEY);

          ALTER TABLE CUSTOMER ADD CONSTRAINT FK_CUSTOMER_NATION 
            FOREIGN KEY (C_NATIONKEY) REFERENCES NATION(N_NATIONKEY);

          ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS_CUSTOMER 
            FOREIGN KEY (O_CUSTKEY) REFERENCES CUSTOMER(C_CUSTKEY);

          ALTER TABLE LINEITEM ADD CONSTRAINT FK_LINEITEM_ORDERS 
            FOREIGN KEY (L_ORDERKEY) REFERENCES ORDERS(O_ORDERKEY);

          ALTER TABLE LINEITEM ADD CONSTRAINT FK_LINEITEM_PARTSUPP 
            FOREIGN KEY (L_PARTKEY, L_SUPPKEY) REFERENCES PARTSUPP(PS_PARTKEY, PS_SUPPKEY);

          EXIT;
          EOF
          echo "‚úÖ Constraints added"

      - name: Verify data load
        run: |
          echo "üìä Verifying data load..."
          docker exec -i ${{ job.services.oracle.id }} sqlplus -S sampleuser/SamplePass123@//localhost:1521/XEPDB1 <<'EOF'
          SET LINESIZE 100
          SET PAGESIZE 50

          SELECT 'REGION' as TABLE_NAME, COUNT(*) as ROW_COUNT FROM REGION
          UNION ALL
          SELECT 'NATION', COUNT(*) FROM NATION
          UNION ALL
          SELECT 'SUPPLIER', COUNT(*) FROM SUPPLIER
          UNION ALL
          SELECT 'PART', COUNT(*) FROM PART
          UNION ALL
          SELECT 'PARTSUPP', COUNT(*) FROM PARTSUPP
          UNION ALL
          SELECT 'CUSTOMER', COUNT(*) FROM CUSTOMER
          UNION ALL
          SELECT 'ORDERS', COUNT(*) FROM ORDERS
          UNION ALL
          SELECT 'LINEITEM', COUNT(*) FROM LINEITEM
          ORDER BY TABLE_NAME;

          EXIT;
          EOF

          echo "‚úÖ Data verification complete!"

      - name: Verify services
        run: |
          docker ps
          curl -sf http://127.0.0.1:47334/api/status | tee mindsdb_status.json || true

      - name: Run tests with result tracking
        env:
          ORACLE_HOST: localhost
          ORACLE_PORT: 1521
          ORACLE_USER: sampleuser
          ORACLE_PASSWORD: SamplePass123
          ORACLE_DB: XEPDB1
          MINDSDB_API_URL: http://localhost:47334
        run: |
          echo "üß™ Running Oracle handler tests..."

          # Create results directory
          mkdir -p /tmp/test_results

          # Run tests with detailed output and reporting
          cd oracle/tests
          pytest -v --tb=short \
            --junit-xml=/tmp/test_results/junit.xml \
            || true
          echo "‚úÖ Tests completed"

      - name: Generate test summary
        if: always()
        run: |
          set -eu
          echo "=== Generating Test Summary ==="

          # Initialize counters
          total_tests=0
          passed=0
          failed=0
          errors=0
          skipped=0

          # Check if JUnit XML exists
          if [ -f /tmp/test_results/junit.xml ]; then
            # Parse JUnit XML for test counts
            if command -v python3 &> /dev/null; then
              python3 <<'PYEOF' > /tmp/test_summary.txt
          import xml.etree.ElementTree as ET
          import sys

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              # Get test suite stats
              testsuite = root.find('.//testsuite')
              if testsuite is not None:
                  tests = int(testsuite.get('tests', 0))
                  failures = int(testsuite.get('failures', 0))
                  errors = int(testsuite.get('errors', 0))
                  skipped = int(testsuite.get('skipped', 0))
                  passed = tests - failures - errors - skipped
                  
                  print(f"{tests},{passed},{failures},{errors},{skipped}")
              else:
                  print("0,0,0,0,0")
          except Exception as e:
              print(f"0,0,0,0,0", file=sys.stderr)
              print(f"Error: {e}", file=sys.stderr)
          PYEOF
              
              if [ -f /tmp/test_summary.txt ]; then
                IFS=',' read -r total_tests passed failed errors skipped < /tmp/test_summary.txt
              fi
            fi
          fi

          # Calculate success rate
          success_rate=0
          if [ $total_tests -gt 0 ]; then
            success_rate=$(( passed * 100 / total_tests ))
          fi

          # Generate markdown summary
          {
            echo "# MindsDB Oracle Handler Test Results"
            echo ""
            echo "## Summary"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| Total Tests | $total_tests |"
            echo "| ‚úÖ Passed | $passed |"
            echo "| ‚ùå Failed | $failed |"
            echo "| ‚ö†Ô∏è Errors | $errors |"
            echo "| ‚è≠Ô∏è Skipped | $skipped |"
            echo "| Success Rate | ${success_rate}% |"
            echo ""
            
            # Overall status
            if [ $total_tests -eq 0 ]; then
              echo "## ‚ö†Ô∏è No Tests Found"
              echo ""
              echo "No test results were generated. Please check your test configuration."
              
            elif [ $passed -eq $total_tests ]; then
              echo "## üéâ All Tests Passed!"
              echo ""
              echo "The MindsDB Oracle handler is working correctly with all tests."
              
            elif [ $passed -gt 0 ]; then
              echo "## ‚ö†Ô∏è Partial Success"
              echo ""
              echo "Some tests passed but issues were detected. Please review failed tests."
              
            else
              echo "## ‚ùå All Tests Failed"
              echo ""
              echo "The Oracle handler has critical issues. Please review the test logs."
            fi
            
            echo ""
            echo "## Database Configuration"
            echo ""
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| Host | localhost |"
            echo "| Port | 1521 |"
            echo "| Database | XEPDB1 |"
            echo "| User | sampleuser |"
            echo "| Oracle Version | XE 21c |"
            echo ""
            
            echo "## TPC-H Test Data"
            echo ""
            echo "The test suite uses TPC-H benchmark data with the following tables:"
            echo ""
            echo "| Table | Description |"
            echo "|-------|-------------|"
            echo "| REGION | Geographic regions |"
            echo "| NATION | Countries/nations |"
            echo "| SUPPLIER | Supplier information |"
            echo "| PART | Part catalog |"
            echo "| PARTSUPP | Part-supplier relationships |"
            echo "| CUSTOMER | Customer information |"
            echo "| ORDERS | Order transactions |"
            echo "| LINEITEM | Order line items |"
            echo ""
            
            # Add test execution details if available
            if [ -f /tmp/test_results/junit.xml ]; then
              echo "## Test Details"
              echo ""
              python3 <<'PYEOF'
          import xml.etree.ElementTree as ET

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              print("| Test Name | Status | Duration |")
              print("|-----------|--------|----------|")
              
              for testcase in root.findall('.//testcase'):
                  name = testcase.get('name', 'Unknown')
                  classname = testcase.get('classname', '')
                  time = float(testcase.get('time', 0))
                  
                  # Get short name without full path
                  if '::' in name:
                      short_name = name.split('::')[-1]
                  else:
                      short_name = name
                  
                  # Check status
                  if testcase.find('failure') is not None:
                      status = "‚ùå Failed"
                  elif testcase.find('error') is not None:
                      status = "‚ö†Ô∏è Error"
                  elif testcase.find('skipped') is not None:
                      status = "‚è≠Ô∏è Skipped"
                  else:
                      status = "‚úÖ Passed"
                  
                  print(f"| {short_name} | {status} | {time:.3f}s |")
          except Exception as e:
              print(f"Could not parse test details: {e}")
          PYEOF
              echo ""
              
              # Show failed test details
              echo "## Failed Test Details"
              echo ""
              python3 <<'PYEOF'
          import xml.etree.ElementTree as ET

          try:
              tree = ET.parse('/tmp/test_results/junit.xml')
              root = tree.getroot()
              
              has_failures = False
              for testcase in root.findall('.//testcase'):
                  failure = testcase.find('failure')
                  error = testcase.find('error')
                  
                  if failure is not None or error is not None:
                      if not has_failures:
                          print("| Test Name | Error Type | Message |")
                          print("|-----------|------------|---------|")
                          has_failures = True
                      
                      name = testcase.get('name', 'Unknown')
                      if '::' in name:
                          short_name = name.split('::')[-1]
                      else:
                          short_name = name
                      
                      if failure is not None:
                          error_type = failure.get('type', 'Failure')
                          message = failure.get('message', 'No message')[:100]
                      else:
                          error_type = error.get('type', 'Error')
                          message = error.get('message', 'No message')[:100]
                      
                      print(f"| {short_name} | {error_type} | {message} |")
              
              if not has_failures:
                  print("‚úÖ **No test failures** - All tests passed successfully!")
          except Exception as e:
              print(f"Could not parse failure details: {e}")
          PYEOF
              echo ""
            fi
            
            echo "---"
            echo ""
            echo "**Analysis completed:** $(date '+%A, %B %d, %Y at %I:%M %p %Z')"
            
          } > /tmp/combined_summary.md

          # Output to GitHub Actions summary
          cat /tmp/combined_summary.md >> $GITHUB_STEP_SUMMARY

          echo "‚úÖ Test summary generated"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mindsdb-oracle-test-results
          path: |
            /tmp/test_results/
            /tmp/mindsdb.log
            /tmp/combined_summary.md
          retention-days: 7

      - name: Update oracle README with test results
        if: always() && github.event_name != 'pull_request'
        run: |
          echo "üìù Updating oracle/README.md with latest test results..."
          python3 .github/scripts/update_readme.py \
            /tmp/test_results/junit.xml \
            oracle/README.md \
            "Oracle" \
            oracle.yml

      - name: Commit README changes
        if: always() && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add oracle/README.md || true
          git diff --quiet && git diff --staged --quiet || \
            (git commit -m "docs(oracle): Update test results in README [skip ci]" && git push) || \
            echo "No changes to commit"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          if [ -n "${MINDSDB_PID:-}" ]; then
            kill ${MINDSDB_PID} || true
            echo "‚úÖ MindsDB stopped"
          fi
